---
layout: post
title: "Kal's Notes: The Art of Agile Development, 2nd Edition"
tags: mgmt tech agile kals_notes
---

<h1>
    Summary
</h1>

# Section 1 - Improving Agility
- ## Chhapter 1 What is Agile
    - Agile name highly used, but agile ideas are largely ignored.
    - Early 90s 'CHAOS' report resulted in companies adopting heavy-handed processes to attempt to control development. 
    This became known as waterfall development.
    - By late 90s, anti-waterfall methodologies were getting attention, 'Extreme Programming', 'Scrum', etc.
    - in 2001, 17 lightweight process proponents got together in Utah. Created Agile Manifesto, w/ 4 Values and 12 Principles.
    > We are uncovering better ways of developing software by doing it and helping others do it. 
    Through this work we have come to value:    
        - Individuals and Interactions over Process and Tools
        - Working software over comprehensive documentation
        - Customer collaboration over contract negotiation
        - Responding to change over following a plan
    - ## Principles
        - Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
        - Welcome changing requirements, even late in development. Agile processes harness change for the customer's
        competitive advantage.
        - Deliver working software frequently, from a couple of weeks to a couple of months, with a preference
        to the shorter timescale.
        - Business people and developers must work together daily throughout the project.
        - Build projects around motivated individuals. Give them the environment and support they need, and trust
        them to get the job done.
        - The most efficient and effective method of conveying information to and within a development team is face to face 
        conversation.
        - Working software is the primary measure of progress.
        - Agile processes promote sustainable development. The sponsors, developers, and users should be able to 
        maintain a constant pace indefinitely.
        - Continous attention to technical excellence and good design enhances agility.
        - Simplicity, the art of maximizing the amount of work not done, is essential.
        - The best architectures, requirements, and designs emerge from self-organizing teams.
        - At regular intervals, the team reflects on how to become more effective, then tunes and adjust its
        behavior accordingly.
    - Agile teams define success as delivering value, not conforming to a plan. Look for value by finding ways to change plans.        
    - Look for opportunities to increase value by changing plans
    - agile teams in charge of their own process, and change it when it isn't suiting them
    - all flavors of agile focus on making progress visible, and allowing stakeholders to course correct regularly
    - 5 core concepts:
        - Rely on People
        - Deliver Value
        - Eliminate Waste
        - Seek technical Excellence
        - Improve your Process
    - the underlying philosophy—adapting plans and putting people first—is really, really foreign to most organizations
    - cargo cult: duplicate the outward view of something successful without understanding how it works internally.
    - People want Agile’s Cargo: better results, more visibility, fewer business failures. But they don’t understand the underlying philosophy, and often wouldn’t agree with it even if they did.
    - Lots of stuff sold in the name of agile. “don’t worry, you won’t have to change.” Uncomfortable ideas like “adaptive planning” and “people-centric” are ignored.

    - ## Chapter 2 How to Be Agile

    - Agile practices often perform double/triple duty. You won't understand it work until you see it in action for a while.
    - Least familiar practices are mostly likely to be cut, but are actually most important.
    - To use practices successfuly, follow these steps:
    - 1. Choose a subset of ideas to master.
    - 2. Use as many corresponding practices as you can.
    - 3. apply consistently. Could take 2 to 3 months to start working.
    - 4. After it's working, start experimenting with changes.
    - 5. Never stop changing; practicing, experimenting, evolving.

    - Introducing New Teams:
        -  Make sure agile is a good fit.
             - Choose an approach the org will support
             - Determine what org needs to do for agile to be successful
             - Get Buy-In 
             - Decide how to Scale 
        - In Weeks leading Up 
            - Determine who coaches will be, who will be product manager.
            - Product Manager meet with stakeholders and exec. sponsor to create draft purpose.
            - Ensure team has physical/virtual room
            - Schedule Team's Chartering Session
            - Ask Team to review new practices
        - When team is ready
            - Have team member plan their first week

    - Applying Individual Agile Practices
        - Some a-la-carte options to try applying include:
            - Daily planning
            - Iterations 
            - Retrospectives
            - Fast Feedback
            - Continuous Integration
            - Test-Driven Development

            - ## Chapter 3: Choose Your Agility
            - will agile help us be more successful?
            - what is success ?
                - better financials
                - strategic goals
                - market position
                - gaining understanding
                - risk mitigation
                - increasing capacity
    
            - The Agile Fluency model
                - zones
                    - focusing
                    - delivering
                    - optimizing
                    - strengthening
                - each zone has benefits, and you need fluency in that zone to reap them
                - fluency achieved when all skills can be applied without effort
                - zones have maturity levels:
                    - learning
                    - proficient
                    - fluent
                    - independently fluent
                - focusing zone
                    - fundamentals: business results, teamwork, ownership.
                    - pre-agile make plans in advance, ask for estimates, expect reports
                    - focusing focusing revise plans frequently, at least once a month, demonstrate progress
                    - pre-agile break plans into tasks, assign tasks to individuals,and judge individuals on tasks.
                    - focusing teams do their own breakdowns, assign work to each other, expect to be judged on value created as a team.
                    - needs organizational support to achieve; if they refuse, perhaps they're not on board with agile.
                    - takes about 2-6 months of dedicated effort to acheive fluency here, better performance within 1-4 months.
                - delivering zone
                    - prevent quality degredation through technical excellence
                    - 3-24 months to develop, improved performance within 2-6 months
    
                - optimizing zone
                    - teams experiement and learn, develop new markets, outmaneuver the competition
                    - product and market experts join teams full-time
                    - give teams full responsibility for their budgets and plans
                    - difficult to obtain permission. typically a year spent building trust first.
                    - fluency takes 3-9 months to develop, improvements within 1-3 months.
    
                - strengthening zone
                    - only appropriate for teams on bleeding edge of managment theory and practice
                    - full circle, bring team learnings back into organizational improvements
    
                - choose your zones
                    - if you can't invest in focusing, agile probably isn't a good fit
                    - without delivering, your code will eventually succumb to technical debt
                    - optimizing will give amazing results, but a lot to ask for the org
               
            - ## Chapter 4: Invest in Agility
                - make the invesments and ignore the practices, teams will improve  
                - perform the pratices, ignore the investments, they'll struggle
                - summary of investments:
                    - all agile teams:
                        - obtain buy-in
                        - create long-lived teams
                        - ensure each team has a coach
                        - assign work to teams, not individuals
                        - focus managers on work system rather than tasks
                        - create physical/virtual room per team
                        - for the first effort, choose something nonurgent
                        - replace waterfall governance with agile governanace
                        - remove, revise or work around harmful hr policies that impede teamwork
                    - focusing teams
                        - account for 1-4 month dip in performance dip
                        - include people with user/customer skills on team
                        - ensure team has access to someone who decides what to work on
                        - ensure each team has a coach
                        - ensure each team ahs access to stakeholders or reps
                    - delivering teams
                        - account for 2-6 month performance dip
                        - integrate all needed skills onto the team (testing/operations)
                        - ensure each team has a coach
                        - each team has control over its dev/build/test/release process
                        - for first effort, find a green-field codebase
                        - address security concerns that affect collab. development
                    - optimizing teams
                        - account for 1-3 month performance dip
                        - ensure team includes people w/ business/market/product expertise
                        - ensure each team includes a coach
                        - give each team responsibility for its budget, plans, and results
                - make time for learning
                    - learning agile will slow teams down at first
                    - teams focus on finishing features before moving on. may feel slower to those used to seeing multiple things in progress.
                    - can trade money for time, hiring experienced practicioners
                    - ignore agile certification schemes, likely money grabs
                    - if there's never a good time, that's a big red flag.
                - choose or create agile teams
                    - most orgs consider people their fundemental resource; in agile, teams are the resource
                    - need to invest in teams that are:
                        - cross functional
                        - fully dedicated
                        - collaborative
                        - long-lived
                    - when building Teams
                        - decide the purpose of the team
                        - decide how many people on each team
                        - determine which skills are needed
                        - choose people who have skills, work well together, and willing to try agile. perhaps self-selection.
                - choose agile coaches
                    - some coaches can handle multiple categories (focusing, delivering, optimizing)
                    - each coach can work with one or two teams
                    - player-coaches can work when dedicated to one team
                - delegate authority and responsibility to teams
                    - (when equipped) teams will make better technical and process decisions than anyone else can for them
                    - work is assigned to teams, not individuals
                    - teams decide their  own processess
                    - focusing teams work with stakeholders to adjust priorities
                    - delivering teams control dev/build/test/release
                    - optimizing teams control their own budget and plans
                    - if work must be assigned to individuals, red-flag; command-and-control is incompatible with agile
                    - if tooling is required, treat individual assignments as team assignments
                    - forcing teams to use corporate tracking tools will decrease their performance
                - Establish a learning-friendly purpose for each team
                    - a purpose that's valuable, but not time sensitive
                    - a purpose that's self contained
                    - a green-field codebase
                    - if deadlines are inflexible, wait until the deadline is met or choose different teams
                - Replace waterfall governance assumptions
                    - remove phase-gates and use an adaptive approach to planning
                    - agile isn't for everyone. if the company needs predictive plans, like command-and-control, waterfall could be better.
                    - waterfall works best with 3-6 month projects, with well understood domains with little uncertainty
                    - waterfall is incompatible with optimizing fluency, limited to subsets of focusing and delivery
                - Change harmful HR policies
                    - policies putting people in competition with each other makes agile more difficult
                    - managers who only valuable tangible output make agile more difficult
                    - if people's careers depend on making themselves look good, it will be harmful to Agile
                    - if there are bad policies you can't work around, managers must be able to shieid teams from them
                - Troubleshooting Investment
                    - team members not trying new practices:
                        - team didn't buy into trying agile
                        - team doesn't have a coach
                        - team feels too much pressure to deliver
                    - team has interpersonal conflicts
                        - teams being disbanded too foten
                        - team is under too much pressure
                        - team's manager neds to help mediate conflicts
                        - hr policies promote competition
                    - team members aren't collaborating
                        - team didn't buy in to trying agile
                        - team members aren't fully dedicated, or don't get along
                        - team doesn't haev a coach
                        - work assignment/tracking assumes individual work
                        - the team's workspace is inadequate
                        - team's manager is assigning individual work
                        - HR policies promote individual work
                    Team's software doesn't do what stakeholders need
                        - team doesn't have right business rep
                        - team doesn't have a coach
                        - team doesn't have access to stakeholders
                    Teams have trouble getting stakeholder attention
                        - stakeholders didn't buy into trying agile
                        - team doesn't have the customer skills it needs
                        - stakeholders don't see the team's work as releveant or valuable
                    Teams software does what customers and users needs, but isn't a business success
                        - team doesn't have right business rep
                        - team needs a better purpose
                        - team need to developer optimizing fluency
                        - team doesn't have control over its plans and spending
                    Teams software has long release cycles, lots of bugs, or operational problems
                        - team doesn't have people all delivering skills they need
                        - team doesn't have a coach who can teach delivery
                        - team needs to develop delivery fluency
                        - team doesn't have control over dev/release/operations process
                        - team is learning how to deal with existing code
                    Development is slower than expected:
                        - team is finishing up pre-agile work or still learning
                        - team neds more coaching
                        - workspace is inadequate
                        - team needs to develop delivering fluency
                        - team doesn't have control over its process
                        - team is dealing with existing code
                        - team is constrained by governanace requirements
                        - team is constrained by security requirements
                       
            - ## Chapter 5: Invest in Change
                - Understanding change
                    - process involves:
                        - late status quo
                        - resistance
                        - chaos
                        - Integration
                        - new status quo
                    - can decrease chaos through SIS
                        - Support - coaching/training etc.
                        - Information - transparency, communication
                        - Structure - describe how the transformation process should unfold
                - Large-Scale Change
                    - if you're not prepared for serious change management, limit to a few teams at a | times:
                - Making Changes
                    - more effective to make transformative change all at once, then to try and incrementally move towards agile fluency
                    - if you are already truly agile, and demonstrating focusing/delivering fluency to some degree, then incremental could work
                - Get Management Buy-In
                    - Agile requires management support, all the way to the top
                        - start with conversation
                            - help management understand what they can get, and what they might lose by not pursuing
                            - maybe better to not mention the word 'agile'
                        - get economic buyer's approval
                            - gatekeepers can't approve teh investments you need
                            - get the buyer to aagree in principle to investing in agile
                            - focus on the big picture
                            - demonstrate the 'summary of investments', and see which investment-benefit trade-offs seem most appropriate
                            - ask if you can make a formal proposal
                        - make a formal proposal
                            - describe concrete benefits, translated to your specific situation
                        - if management thinks we're already agile:
                            - many companies say they are agile, but are nowhere close.
                            - don't argue about terminology, focus on the benefits and existing challenges.
                        - if mgmt isnt supportive
                            - put yourself in their shoes. if agile can't help, but it isn't a good fit.
                            - assume the status quo wont change, and decide if that's OK for you
                        - Changing an org from within:
                            - question your motives
                            - have a solid support network
                            - find small pleasures
                            - dont give up
                            - respect is your currency
                            - stay within your spehere of influence
                            - cultivate champions
                            - find the gap
                            - understand why
                            - repeat yourself
                            - dont criticize everything
                            - don't seek credit
                            - be careful what you wish for
                    - Get Team Buy-In
                        - get team's buy-in first, best w/o mgmt present
                        - give people real veto power
                        - be honest; change is disruptive
                        - emphasize that this is an experiment
                        - if people refuse, see if they can reserve judgement, or if they'd like to move to another team
                        - let everyone know there is hard time limit to the end of the experiment where it can be called off
                    - Get Stakeholder buy-in
                        - w/o stakeholder buy-in they may sabotage your efforts, especially if agile is succeeding
                        - stakeholders are used to a predictive approach w/ documents, progress-reports and sign-offs
                        - agile teams focus on feedback and constantly changing their plans
                        - some stakeholders love it; they know what's really going on and can influence outcomes
                        - others hate it, see it as a meanuever to avoid teams making promises
                        - if you face widespread, active opposition where even a pilot team isn't acceptable, it may not be a good fit
    
            - ## Chapter 6: Scaling Agility
                - typical agile team has 4-10 people
                - scaling involves organizational capacity, coaching capability, and team capability
                - Organizational Capability
                    - as pilot teams develop fluency, they'll identify organizational roadblocks etc. you'll have to navigate those for each team.
                    - only once the organization can clearly support fluent teams should you push agile aggressively
                Coaching Capability
                    - each team needs skilled coaches
                    - coaches can perhaps move on once thier teams reach fluency
                Team Capability
                    - beware hiring agile staff to lead transformation; more bandwagon-riding than capability out there.
                    - if using staff augmentation, focus on boutique/independent consultancies specializing in agile change
                    - success on one team doesn't guarantee success on another. need to keep making the investments
                Scaling Products and Portfolios
                    - vertical scaling
                        increase number of teams who can share ownership of a product or portfolio
                        - LeSS (Large Scale Scrum) https://less.works/
                            - suitable for 2 to 8 teams of up to 8 people each
                            - all work against the same product backlog and share ownership of code
                            - LeSS teams are guided by a product manager/owner who decides product direction
                        - FAST (Fluid Scaling Technology) - https://www.fastagile.io/fast-guide
                            - forms new teams every few days, no team-level ownership
                            - quite a radical approach
                            - perhaps worth an experiment with a pilot team of 10-30 people
                        - problem: collective ownership easily turns into no ownership
                        - benefit: cross functionality is easier with more shared roles on smaller Teams
                    - horizontal scaling
                        - in theory each team should own an end-to-end slice of a product
                        - requires different types of teams:
                            - stream aligned
                            - complicated sub-system teams
                            - enabling teams
                            - platform teams
                        - can scale indefinitely, but becomes harder to manage as teams grow
                    - scaling vertically and horizontally
                        - divide org into 'groups' that are effectively stream-aligned
                        - when they need to scale, they can adopt horizontal scaling techniques
                    - the recommendation
                        - start by emphasizing team fluency
                        - scale vertically before horizontally
                        - if larger than 60-70, split into multiple veritcally scaled groups

# Part II. Focusing on Value
    - Focusing Fluency
        - plan in terms of business value, not tech tasks
        - demonstrate progress at least once a month 
        - change priorities when business needs it 
        - provide visibility so mgmt can intervene 
        - regularly improve processes 
        - collaborate well within 
    - Respond to business needs 
        - works with business rep to provide org. perspective 
        - stakheholders can rely on team to work on priorities 
        - team plans and shows progress in a way meaningful to business 
        - team's business rep can see and change direction at least once a month 
        - mgmt enables team to work at indefinite consistent pace
    - Works effectively as a team
        - generate its own tasks and plans based on business priorities
        - team considers their plan to be team's work, not individuals
        - members share accountability for getting their plan done
        - mgmt considers the plan to be team's work rather than assigning accountability to individuals
    - Team pursues greatness
        - embrace and improve a joint approach to work
        - aware of how internal relationships affect success
        - aware of how work environment affect success

    # Chapter 7
    # Whole Team
        - compose team with diverse skills and experience (customer, dev, coaching)
        - teams need skills, not roles
        - everybody works to broaden skills, esp. customer-related ones
        # Customer skills
            - difficult and important aspect of the team is finding people with customer skills
            ## Product Management (aka product ownership)
                - work with stakeholders to discover what to build, why its important , and who its for
                - lead demos, seek feedback, promote the teams work
                - teams need people with pm skills, not titles. 
            ## Domain Expertise
                - most time spent with team, figuring out details and creating examples of complex rules
            ## UX design
                - because software is iterative, designers can take real software to users and get feedback to guide plans
        ## Dev Skils 
            ## programing, design, architecture     
                - uses tdd to combine architecture, design, tests and coding into a single ongoing activity
            ## Testing
                - doesnt involve testing for bugs, team should produce bug-free code
            ## Operations
                - help deploy, monitor, manage, secure software
                - create pager duty rotation
                - analyze and prevent prod incidents
        ## Coaching Skills
            - teams need coaching in team development, self-org, and facilitation
            - focusing, devliering and optimizing zones
            - coaches teach team to be self-reliant, don't do things for the team
            ### Practicioner-Coaches
                - have skills and background to show rather than tell
            ### Player-Coaches
                - people like 'senior engineer' or 'tech lead'
                - tend to have less success making teams independently fluent, or understanding when to influence change
            ### Facilitator-Coaches
                - leads from the sidelines, typically teaching focusing zone practices
                - downside is they dont contribute a lot to day-to-day development, and orgs may spread them thin
        ## Generalizing Specialists
            - teams need T/M shaped people, to take on different types of work as needs arise
            - any specialist can choose to learn to contribute outisde their speciality
        ## Staffing the Team
            - if waiting for someone outside the team to make a decision, you dont have a whole team
            ### - Fully Dedicated Team Members
                - assiging people to multiple teams yields terrible results
                - OK to have people join the team temporarily on a full-time basis
            ### - Stable teams
                - never disband, even at the end of purpose/product
                - add/remove one person per month
        ## Team Size
            - book should work for 3-20 person teams, for new teams 4-8 is good, beyond 12 you'll have issues.
            - w/o pairing, have 3-5 programmers, w/ pairing, 4-10
            - 1 to 2 customers for every 3 programmers
            - 1 tester to every 2-4 programmers, or 4-8 if they have delivering fluency
            - 0 to 2 operations people
            - 1 or 2 coaches, maybe splitting time with other teams
            - this doesn't imply roles, just balance in work
        ## A Team of Peers
            - no one in charge of anyone else
            - people have say in their area of expertise: customers know product priorities, devs know tech necessity best, etc.
            - agile teams have lots of fun! 'joy' is a value
            - managers focus on the larger system that teams are embedded within
        ## Indicators
            - whole teams :
                - solve problems and fulfill purpose without waiting for outside help
                - members work outside their speciality to prevent bottlenecks
                - make decisions smoothly and effectively
                - seamlessly switch leadership roles from task to task
        ## Alternatives and Experiments
            - simple practice:
                - find everyone needed to achieve goals
                - put them on the same team
                - have them work in concert towards the goals

    # Team Room
        - rather than write a document for programmers, include experts on the team
        - doubles productivity, cut time-to-market to one third
        - effective communication: 
            - collaboration is better than conversation
            - in person is better than virtual
            - video better than audio only, audio better than text
            - real-time better than asynchronous
            - interactive better than one-way 

        ## Secrets of Collaboration
            ### Always Ask, Always help
                - you might not be as productive, but agile is about the team
                - to prevent disruption when in the zone, try pairing or mob programming
            ### Drop in, Drop out
                - listen to proposed topic, see if it needs your input 
                - if you are neither learning nor contributing, move yourself elsewhere
            ### Create Visualiations
                - whiteboards, index cards, etc.
                - create a model that people can manipulate when having compelx discussions
            ### Work Simultaneously
                - make sure everyone can contribute to planning tools etc. at the same time 
            ### Seek Consent   
                - leaves room for people to withold support without stopping a proposal going forward
                - if someone vetos, they have to explain why
            ### Agree to Experiment
                - avoid speculation about what might go wrong 
                - when drifting in to speculation, propose an experiment

        ## Physical Team Rooms 
            - not relevant any longer

        ## Virtual Team Rooms   
            - if some people are remote, everyone in person needs to use virtual room as well
            ### Remote Equipment and tools
                - video conferencing
                - messaging
                - virtual whiteboards
                - collaborative versions of task specific tools (Figma etc.)
                - document store
                - inexpensive tablets for white board sketches
                - do not purchase agile lifecycle management software
            ### Designing Remote Collaboration
                - make time for personal connections
                - ensure safety
                - make the implicit explicit. use zoom reactions etc.
                - upgrade your medium. move to audio/video quickly
                - enable simultaneous conversations; breakout rooms etc.
                - create a 'wall', info everyone needs to keep current
                - get tablets
                - respect differences in access
            ### Indicators
                - when you have a successful team room:
                    - communication between team members is fast and effective
                    - you're aware of when you can contribute
                    - no need to guess at answers
                    - members spontaneously form groups to solve problems
                    - feeling of comraderie and mutual respect

    # Safety
        - team comp, socialization outside work, education background, extro/intravert, colocation/remote,
            seniority, team size, indivudal performance. none of them mattered really except for psychological safety.
        ## Understanding Psychological Safety
            - be yourself without fear of negative consequences
            - propose ideas, raise concerns, make mistakes, without being punished/humiliated
            - safe to disagree with each other
            - everyone's voice is heard
        ## How to Create Safety
            - you cant force safety on anyone, you can only create a situation where safety is possible
            ### enable all voices
                - start a meeting with a check-in, make sure everyone says something, even if its just pass
                - split large discussions into smaller groups
            ### be open about mistakes
                - when you make a mistake, stand up, take a bow, and smile 
            ### Be Curious
                - show genuine interest in others opinions, dont listen to respond 
            ### learn how to give and receieve feedback
                - focus on things and ideas, not people
                - say 'yes and'
                - guidelines for giving feedback
                    - create an opening; ask permission
                    - describe the behavior
                    - state the impact
                    - make the request
                    - listen to the response
                    - negotiate next steps
            ### use empathy
                - fundamental attribution error: we tend to assume people do things because of their personality, not their situation
                - assume positive intent
            ### allow yourself to be vulnerable
                - share personal details
                - things that happen at home affect us at work
                
        ## Leaders Role
            - if you're in a position of power, your words and actions have more weight
            ### model the behaviors you want to see 
                - enable everyones voice, be open about mistakes, be curious, give feedback, show empathy, be vulnerable.
                - phrase mistakes as not having blame; ie. i made a mistake and this is what i learned, not "im so stupid"
            ### be explicit about expectations
                - be clear about what you expect from your fellow teammmemebrs
            ### dont shy away from conflict
                - avoid false harmony and groupthink
                
        ## Indicators  
            - your team has safety if:
                - team members speak up about mistakes and what they've learned
                - team members disagree constructively
                - team members bring up ideas and problems
                - team creates better products that incorporate more ideas
                - its easier to hire and retain people with diverse backgrounds


    # Purpose
        - too often teams are told details about what to do, but not why
        - purpose makes sure everone understands the big picture
        ## Identify the Purpose 
            - budget for team comes from 'executive sponsor', who are often influenced by stakeholders
            - at least one person has product management skills on the team
            - if there's one clear visionary, they should be on the team, no broken telephone
            - if team has multiple purposes,  work on one at a time
        ## Document the Purpose
            - Product Managers work to draft a purpose document, which should include:
                - Vision; why it's important to company and customers, think long term and focus on value
                - Mission; outcomes in next 3-6 months
                - Indicators; avoid talking about shipping things by a given date.
            - document is a guide to help people understand what the team is trying to achieve
            - a guide for collaboration, not a contract. the teams purpose will change as they learn.
        ## Charter the Purpose
             - chartering session represents launch of the new effort
            ### Review the draft purpose
                - explain the thinking behind the draft, to explain the why
            ### Consent to the vision
                - a consent vote will expose any major objections that have to go back to stakeholders
            ### Improve the mission
                - solicit feedback from team members; reactions and comments, and refine the mission
                - take a vote; doesnt need to be perfect, just good enough for now
            ### Revise the indicators
                - remind everyone they're not a contract, just a guide. will be iterated.
                - break into small groups, ensure evry indicator has a clear yes/no answer to check progress
            ### Commit to the purpose
                - get everyone to sign off on the new purpose
                - takes a couple days in the chartering session to complete, and incluides exec sponsors and key stakehodlers
                - afterwards, transcribe purpose, context and alignment.
            ### Promote the Purpose
                - make the purpose a constant touchstone, refer to it when explaining plans and priorities
                - invite sponsor and key stakeholders to see WIP, visual planning, demos etc.
            ### Iterate the purpose
                - 3 to 6 months, revise purpose, with a new chartering session
            ### Indicators
                - when team has a clear Purpose
                    - prioritizing features is easy
                    - pms have no trouble justifying their prioritization decisions
                    - developers contribute to planning discussions by suggesting ways to increase value while reducing cost
                    - key stakeholders trust that the team is building what they need
                    - the organization supports the teams efforts

    # Context
        - during context discussion, work w/ stakeholders to consider: 
            - skills available to the team
            - teams boundaries and interactions
            - rsources committed to your team
        ## Available skills
            - each member introduce themselves, and describe skills/experience they bring to the team
            - make a separate list of people who contribute, but aren't fully dedicated to the team
            - review purpose, have everyone note if there are skills/permissions needed
        ## boundaries and interactinos
            - use a whiteboard to create a context diagram
            - brainstorm who affects or is affected by teams work
            - arrange and group on board, and label what team provides to group and what is received from group
            - populate 'skills needed', 'permissions needs', 'resources needed' 'communicatino to provide'
            - decide how to simplify communications, and who is responsible
        ## Committed Resources
            - by now, team should have list of skills, resources, permissions needed
            - sort them into must, should, could have and dont need
            - discard dont need, and for remainders identify who can provide them, how commited they are, how to get it.
            - have team review and make sure anything important the team needs is accounted for
        ## Sponsor committment
            - review anything team is missing and ensure sponsor can commit to delivering them.
            - if anything essential isn't available, cancel or postpone the team's purpose
        ##Iterating Context
            - After the sessino is finished, keep a copy of skills inventory, context diagram, and committed resources.
            - post context diagrams somewhere
            - review every 6 months or so
        ## Indicators
            - when your team understands context and has appropriate commited resources:
                - team has access to everything it needs to accomplish its purpose
                - team isn't blindsided by previously unknown groups or expectations
                - communication is smooth and steady

    # Alignment
        - a team is a group of people who depend on each other to accomplish a shared goal
        - ## Chartering Alignment
            ### get to know one another
                - discuss the follownig questions
                    - who am i?
                    - whats something people learn about me once they get to know me 
                    - why do i believe this group is well-suited to achieve the team's purpose
                    - what's the most important thing others need to know about working with me effectively?
                    - whats in it for me?
            ### Create working agreements
                - start by sharing stories of other teams you've worked on , good and bad
                - generate a list of potential working agreements
                - make sure these categories considered:
                    - practices your team will use
                    - how you'll communicate
                    - how you'll make decisions
                    - how you'll help without being disruptive
                    - core hours
                - post the list
            ### Define Standards
                - create a minimal set of standards you can live with
                - focus on consitency and consensus over perfection
                - definition of done
                - coding standards etc.
        ## Iterating Alignment
            - limit work agreements to about 5; these are habits we're looking to adopt. keep knocking them out.
        ## Adhering to Agreements
            - tools cant solve interpersonal conflicts
        ## Indicators
            - teams have effective working agreements when:
                - team uses your agreements to prevent and resolve conflicts
                - your standards improve the readability and maintainability of code 
                - your standards allow team members to more easily understand familiar parts of the system


    # Energized Work
        - professionals do their best, most productive work, when they're energized and motivated
        ## How to be energized
            - take care of yourself, eat healthy, exerise, sleep.
            - at work, turn off interruptions.
        ## Supporting Energized Work
            - go home on time.. what about in remote-first?
            - pair programming great for focus
            - consider working agreements to keep everyone energized
            - a clear purpose is energizing
            - teams purpose needs to be achievable
        ## Taking Breaks
            - when you make more mistakes than progress, it's time to take a break.
        ## Indicators
            - When team is energized:
                - team has a sense of comaraderie
                - team is engaged in its work and eager ot make it better
                - team makes consistent progress every week
                - value health over short-term progress and feel productive and successful


    # Chapter 8 - Planning
        - Agile is adaptive, not predictive
        # Stories
            - Stories are reminders for things to about
            - Stories don't need to be detailed, not a requirements document
            ## How to create a story
                - stories represent customer value and are described in customer's terminology
                - stories have clear completion criteria
            ## Customer value
                - no stories for technical issues; customers wouldn't know how to prioritize it
                - spread technical considerations across all stories; aka evolutionary design
            ## Splitting and Combining Stories
                - split stories should remain customer-centric
                - some splitting options:
                    - according to priorities
                    - according to data 
                    - according to operations
                    - according to CRUD operations
                    - according to cross-cutting concerns (logging/security/etc)
                    - according ton non-functional concerns (performance, stability, etc.)
                ### Tiny Stories
                    - at least describe technical work in business terms
            ## Special stories
                ### Bug Stories
                    - schedule them as soon as possible
                ### Nonfunctional stories
                    - describe exactly how fast, stable etc. things should be
                    - classify both 'acceptable' and 'best possible' performance
                ### Operation/Security stories
                    - customers often have trouble thinking of these sorts of stories
                ### Spike stories
                    - purpose is to size the other story, not design the solution
                ### Clean-up stories
                    - parts of code you work on most often will automatically get better over time
                    - you shouldn't need clean-up stories to keep your code clean
                    - if necessary, phrase in terms of business benefit
                    - timebox to make sure you can stop at some point
            ## Prerequisites
                - stories don't replace requirements; need another way to get those (on-site customers, incremental requirements)
            ## Indicators
                - when you use stories well
                    - customers understand all the work they approve and schedule
                    - easy to explain to stakeholders what the team is wroking on and why it matters
                    - team works on small, manageable pieces, makes customer-valued progress multiple times per week
                    - stories are cheap to create and easy to discard

        # Adaptive Planning
            ## Valuable Increments
                - valuable increments are
                    - releaseable
                    - valuable
                    - incremental
                - valuable incremenets fall into these categories
                    - direct value - build/change/fix something
                    - learning value - released when experiment is ready to run
                    - option value - create the ability to postpone or change decisions
            ## Focus on one increments at a time
                - working on multiple ideas simultaneously feels good, but very wasteful
                - focusing on one increment at a time wil improve delivery speed and increase value
                - focus on small, valuable increments, on releasing one at a time.
                - cool charts to look at!
            ## Slice your Increments
                - once an increment is done, you can change direction without wasting any work
                - minimize WIP
            ## Your first increment
                - use an MVP to validate product ideas
            ## Adapt your plans
                - plans should be as much a plan for learning as they are a plan for building
                - to increase the value of your software, create opportunites to learn
                - delay decisions until the last responsible moment, maximize your information
                - the earlier you make a decision, the more likely you are to miss something important
            ## How to create your plan
                - use rolling-wave planning, add detail just as it is needed
                - distance each LOD looks into the future is called 'planning horizon'; horizons include:
                    - Purpose of the team - w/ mission
                    - Visual Planning - map of possible valuable increments to achieve mission
                    - break increments into smallest valuable increments
                    - use planning agme to break increments into 'just right' sized stories
                    - use task planning ot break stories into dev tasks
                    - use incremental requirements just befire starting dev
                - use a pull system to maintain progress
                    - pull stories out of the visual plan when you need more tasks
                    - pull stories out of the next small valuable increment when needed
                    - when you need more ideas for possible increments, pull them out of purpose/mission
                    - when close to completing your mission, you'll go back to sponsor and pull a new mission from vision/purpose
                - lots of great charts!
            ## Balancing Adaptability and Predictability
                - the longer your planning horizons, the more work you'll throw away when plans change, the more people will resist change
                - longer horizons are often needed for good roadmaps
                - planning horizons are a trade-off between less waste and greater agility vs. more certainty and predictability
            ## Adaptive Planning and Organizational Culture
                - adaptive teams will achieve their purpose, but won't be able to say exactly what it will deliver
                - use rolling-wave planning with longer horizons to match the organization's expectations
            ## Indicators
                - when you create, maintain, and communicate a good plan:
                    - the plan shows how the team will achieve it's purpose or learn how to achieve it 
                    - team members are confident the plan is achievable
                    - you release value regularly and consistently
                - when you adapt your plan well
                    - you consistently seek out new opportunitites to learn new things abotu your plan, your product and stakeholders
                    - as you learn, you modify your plan

        # Visual Planning
            - rather than saying 'do this then do that', use a visual plan that allows you to adapt
            ## Who plans?
                - led by team members with product management skills, along with other customers and stakeholders
                - developers may or may not be involved
            ## Cluster Mapping
                - simplest and more flexible way to visualize plans
                ### 1. Brainstorm Techniques
                    - 



