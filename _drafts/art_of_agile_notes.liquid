---
layout: post
title: "Kal's Notes: The Art of Agile Development, 2nd Edition"
tags: mgmt tech agile kals_notes
---

<h1>
    Summary
</h1>

# Section 1 - Improving Agility
- ## Chhapter 1 What is Agile
    - Agile name highly used, but agile ideas are largely ignored.
    - Early 90s 'CHAOS' report resulted in companies adopting heavy-handed processes to attempt to control development. 
    This became known as waterfall development.
    - By late 90s, anti-waterfall methodologies were getting attention, 'Extreme Programming', 'Scrum', etc.
    - in 2001, 17 lightweight process proponents got together in Utah. Created Agile Manifesto, w/ 4 Values and 12 Principles.
    > We are uncovering better ways of developing software by doing it and helping others do it. 
    Through this work we have come to value:    
        - Individuals and Interactions over Process and Tools
        - Working software over comprehensive documentation
        - Customer collaboration over contract negotiation
        - Responding to change over following a plan
    - ## Principles
        - Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.
        - Welcome changing requirements, even late in development. Agile processes harness change for the customer's
        competitive advantage.
        - Deliver working software frequently, from a couple of weeks to a couple of months, with a preference
        to the shorter timescale.
        - Business people and developers must work together daily throughout the project.
        - Build projects around motivated individuals. Give them the environment and support they need, and trust
        them to get the job done.
        - The most efficient and effective method of conveying information to and within a development team is face to face 
        conversation.
        - Working software is the primary measure of progress.
        - Agile processes promote sustainable development. The sponsors, developers, and users should be able to 
        maintain a constant pace indefinitely.
        - Continous attention to technical excellence and good design enhances agility.
        - Simplicity, the art of maximizing the amount of work not done, is essential.
        - The best architectures, requirements, and designs emerge from self-organizing teams.
        - At regular intervals, the team reflects on how to become more effective, then tunes and adjust its
        behavior accordingly.
    - Agile teams define success as delivering value, not conforming to a plan. Look for value by finding ways to change plans.        
    - Look for opportunities to increase value by changing plans
    - agile teams in charge of their own process, and change it when it isn't suiting them
    - all flavors of agile focus on making progress visible, and allowing stakeholders to course correct regularly
    - 5 core concepts:
        - Rely on People
        - Deliver Value
        - Eliminate Waste
        - Seek technical Excellence
        - Improve your Process
    - the underlying philosophy—adapting plans and putting people first—is really, really foreign to most organizations
    - cargo cult: duplicate the outward view of something successful without understanding how it works internally.
    - People want Agile’s Cargo: better results, more visibility, fewer business failures. But they don’t understand the underlying philosophy, and often wouldn’t agree with it even if they did.
    - Lots of stuff sold in the name of agile. “don’t worry, you won’t have to change.” Uncomfortable ideas like “adaptive planning” and “people-centric” are ignored.

    - ## Chapter 2 How to Be Agile

    - Agile practices often perform double/triple duty. You won't understand it work until you see it in action for a while.
    - Least familiar practices are mostly likely to be cut, but are actually most important.
    - To use practices successfuly, follow these steps:
    - 1. Choose a subset of ideas to master.
    - 2. Use as many corresponding practices as you can.
    - 3. apply consistently. Could take 2 to 3 months to start working.
    - 4. After it's working, start experimenting with changes.
    - 5. Never stop changing; practicing, experimenting, evolving.

    - Introducing New Teams:
        -  Make sure agile is a good fit.
             - Choose an approach the org will support
             - Determine what org needs to do for agile to be successful
             - Get Buy-In 
             - Decide how to Scale 
        - In Weeks leading Up 
            - Determine who coaches will be, who will be product manager.
            - Product Manager meet with stakeholders and exec. sponsor to create draft purpose.
            - Ensure team has physical/virtual room
            - Schedule Team's Chartering Session
            - Ask Team to review new practices
        - When team is ready
            - Have team member plan their first week

    - Applying Individual Agile Practices
        - Some a-la-carte options to try applying include:
            - Daily planning
            - Iterations 
            - Retrospectives
            - Fast Feedback
            - Continuous Integration
            - Test-Driven Development

            - ## Chapter 3: Choose Your Agility
            - will agile help us be more successful?
            - what is success ?
                - better financials
                - strategic goals
                - market position
                - gaining understanding
                - risk mitigation
                - increasing capacity
    
            - The Agile Fluency model
                - zones
                    - focusing
                    - delivering
                    - optimizing
                    - strengthening
                - each zone has benefits, and you need fluency in that zone to reap them
                - fluency achieved when all skills can be applied without effort
                - zones have maturity levels:
                    - learning
                    - proficient
                    - fluent
                    - independently fluent
                - focusing zone
                    - fundamentals: business results, teamwork, ownership.
                    - pre-agile make plans in advance, ask for estimates, expect reports
                    - focusing focusing revise plans frequently, at least once a month, demonstrate progress
                    - pre-agile break plans into tasks, assign tasks to individuals,and judge individuals on tasks.
                    - focusing teams do their own breakdowns, assign work to each other, expect to be judged on value created as a team.
                    - needs organizational support to achieve; if they refuse, perhaps they're not on board with agile.
                    - takes about 2-6 months of dedicated effort to acheive fluency here, better performance within 1-4 months.
                - delivering zone
                    - prevent quality degredation through technical excellence
                    - 3-24 months to develop, improved performance within 2-6 months
    
                - optimizing zone
                    - teams experiement and learn, develop new markets, outmaneuver the competition
                    - product and market experts join teams full-time
                    - give teams full responsibility for their budgets and plans
                    - difficult to obtain permission. typically a year spent building trust first.
                    - fluency takes 3-9 months to develop, improvements within 1-3 months.
    
                - strengthening zone
                    - only appropriate for teams on bleeding edge of managment theory and practice
                    - full circle, bring team learnings back into organizational improvements
    
                - choose your zones
                    - if you can't invest in focusing, agile probably isn't a good fit
                    - without delivering, your code will eventually succumb to technical debt
                    - optimizing will give amazing results, but a lot to ask for the org
               
            - ## Chapter 4: Invest in Agility
                - make the invesments and ignore the practices, teams will improve  
                - perform the pratices, ignore the investments, they'll struggle
                - summary of investments:
                    - all agile teams:
                        - obtain buy-in
                        - create long-lived teams
                        - ensure each team has a coach
                        - assign work to teams, not individuals
                        - focus managers on work system rather than tasks
                        - create physical/virtual room per team
                        - for the first effort, choose something nonurgent
                        - replace waterfall governance with agile governanace
                        - remove, revise or work around harmful hr policies that impede teamwork
                    - focusing teams
                        - account for 1-4 month dip in performance dip
                        - include people with user/customer skills on team
                        - ensure team has access to someone who decides what to work on
                        - ensure each team has a coach
                        - ensure each team ahs access to stakeholders or reps
                    - delivering teams
                        - account for 2-6 month performance dip
                        - integrate all needed skills onto the team (testing/operations)
                        - ensure each team has a coach
                        - each team has control over its dev/build/test/release process
                        - for first effort, find a green-field codebase
                        - address security concerns that affect collab. development
                    - optimizing teams
                        - account for 1-3 month performance dip
                        - ensure team includes people w/ business/market/product expertise
                        - ensure each team includes a coach
                        - give each team responsibility for its budget, plans, and results
                - make time for learning
                    - learning agile will slow teams down at first
                    - teams focus on finishing features before moving on. may feel slower to those used to seeing multiple things in progress.
                    - can trade money for time, hiring experienced practicioners
                    - ignore agile certification schemes, likely money grabs
                    - if there's never a good time, that's a big red flag.
                - choose or create agile teams
                    - most orgs consider people their fundemental resource; in agile, teams are the resource
                    - need to invest in teams that are:
                        - cross functional
                        - fully dedicated
                        - collaborative
                        - long-lived
                    - when building Teams
                        - decide the purpose of the team
                        - decide how many people on each team
                        - determine which skills are needed
                        - choose people who have skills, work well together, and willing to try agile. perhaps self-selection.
                - choose agile coaches
                    - some coaches can handle multiple categories (focusing, delivering, optimizing)
                    - each coach can work with one or two teams
                    - player-coaches can work when dedicated to one team
                - delegate authority and responsibility to teams
                    - (when equipped) teams will make better technical and process decisions than anyone else can for them
                    - work is assigned to teams, not individuals
                    - teams decide their  own processess
                    - focusing teams work with stakeholders to adjust priorities
                    - delivering teams control dev/build/test/release
                    - optimizing teams control their own budget and plans
                    - if work must be assigned to individuals, red-flag; command-and-control is incompatible with agile
                    - if tooling is required, treat individual assignments as team assignments
                    - forcing teams to use corporate tracking tools will decrease their performance
                - Establish a learning-friendly purpose for each team
                    - a purpose that's valuable, but not time sensitive
                    - a purpose that's self contained
                    - a green-field codebase
                    - if deadlines are inflexible, wait until the deadline is met or choose different teams
                - Replace waterfall governance assumptions
                    - remove phase-gates and use an adaptive approach to planning
                    - agile isn't for everyone. if the company needs predictive plans, like command-and-control, waterfall could be better.
                    - waterfall works best with 3-6 month projects, with well understood domains with little uncertainty
                    - waterfall is incompatible with optimizing fluency, limited to subsets of focusing and delivery
                - Change harmful HR policies
                    - policies putting people in competition with each other makes agile more difficult
                    - managers who only valuable tangible output make agile more difficult
                    - if people's careers depend on making themselves look good, it will be harmful to Agile
                    - if there are bad policies you can't work around, managers must be able to shieid teams from them
                - Troubleshooting Investment
                    - team members not trying new practices:
                        - team didn't buy into trying agile
                        - team doesn't have a coach
                        - team feels too much pressure to deliver
                    - team has interpersonal conflicts
                        - teams being disbanded too foten
                        - team is under too much pressure
                        - team's manager neds to help mediate conflicts
                        - hr policies promote competition
                    - team members aren't collaborating
                        - team didn't buy in to trying agile
                        - team members aren't fully dedicated, or don't get along
                        - team doesn't haev a coach
                        - work assignment/tracking assumes individual work
                        - the team's workspace is inadequate
                        - team's manager is assigning individual work
                        - HR policies promote individual work
                    Team's software doesn't do what stakeholders need
                        - team doesn't have right business rep
                        - team doesn't have a coach
                        - team doesn't have access to stakeholders
                    Teams have trouble getting stakeholder attention
                        - stakeholders didn't buy into trying agile
                        - team doesn't have the customer skills it needs
                        - stakeholders don't see the team's work as releveant or valuable
                    Teams software does what customers and users needs, but isn't a business success
                        - team doesn't have right business rep
                        - team needs a better purpose
                        - team need to developer optimizing fluency
                        - team doesn't have control over its plans and spending
                    Teams software has long release cycles, lots of bugs, or operational problems
                        - team doesn't have people all delivering skills they need
                        - team doesn't have a coach who can teach delivery
                        - team needs to develop delivery fluency
                        - team doesn't have control over dev/release/operations process
                        - team is learning how to deal with existing code
                    Development is slower than expected:
                        - team is finishing up pre-agile work or still learning
                        - team neds more coaching
                        - workspace is inadequate
                        - team needs to develop delivering fluency
                        - team doesn't have control over its process
                        - team is dealing with existing code
                        - team is constrained by governanace requirements
                        - team is constrained by security requirements
                       
            - ## Chapter 5: Invest in Change
                - Understanding change
                    - process involves:
                        - late status quo
                        - resistance
                        - chaos
                        - Integration
                        - new status quo
                    - can decrease chaos through SIS
                        - Support - coaching/training etc.
                        - Information - transparency, communication
                        - Structure - describe how the transformation process should unfold
                - Large-Scale Change
                    - if you're not prepared for serious change management, limit to a few teams at a | times:
                - Making Changes
                    - more effective to make transformative change all at once, then to try and incrementally move towards agile fluency
                    - if you are already truly agile, and demonstrating focusing/delivering fluency to some degree, then incremental could work
                - Get Management Buy-In
                    - Agile requires management support, all the way to the top
                        - start with conversation
                            - help management understand what they can get, and what they might lose by not pursuing
                            - maybe better to not mention the word 'agile'
                        - get economic buyer's approval
                            - gatekeepers can't approve teh investments you need
                            - get the buyer to aagree in principle to investing in agile
                            - focus on the big picture
                            - demonstrate the 'summary of investments', and see which investment-benefit trade-offs seem most appropriate
                            - ask if you can make a formal proposal
                        - make a formal proposal
                            - describe concrete benefits, translated to your specific situation
                        - if management thinks we're already agile:
                            - many companies say they are agile, but are nowhere close.
                            - don't argue about terminology, focus on the benefits and existing challenges.
                        - if mgmt isnt supportive
                            - put yourself in their shoes. if agile can't help, but it isn't a good fit.
                            - assume the status quo wont change, and decide if that's OK for you
                        - Changing an org from within:
                            - question your motives
                            - have a solid support network
                            - find small pleasures
                            - dont give up
                            - respect is your currency
                            - stay within your spehere of influence
                            - cultivate champions
                            - find the gap
                            - understand why
                            - repeat yourself
                            - dont criticize everything
                            - don't seek credit
                            - be careful what you wish for
                    - Get Team Buy-In
                        - get team's buy-in first, best w/o mgmt present
                        - give people real veto power
                        - be honest; change is disruptive
                        - emphasize that this is an experiment
                        - if people refuse, see if they can reserve judgement, or if they'd like to move to another team
                        - let everyone know there is hard time limit to the end of the experiment where it can be called off
                    - Get Stakeholder buy-in
                        - w/o stakeholder buy-in they may sabotage your efforts, especially if agile is succeeding
                        - stakeholders are used to a predictive approach w/ documents, progress-reports and sign-offs
                        - agile teams focus on feedback and constantly changing their plans
                        - some stakeholders love it; they know what's really going on and can influence outcomes
                        - others hate it, see it as a meanuever to avoid teams making promises
                        - if you face widespread, active opposition where even a pilot team isn't acceptable, it may not be a good fit
    
            - ## Chapter 6: Scaling Agility
                - typical agile team has 4-10 people
                - scaling involves organizational capacity, coaching capability, and team capability
                - Organizational Capability
                    - as pilot teams develop fluency, they'll identify organizational roadblocks etc. you'll have to navigate those for each team.
                    - only once the organization can clearly support fluent teams should you push agile aggressively
                Coaching Capability
                    - each team needs skilled coaches
                    - coaches can perhaps move on once thier teams reach fluency
                Team Capability
                    - beware hiring agile staff to lead transformation; more bandwagon-riding than capability out there.
                    - if using staff augmentation, focus on boutique/independent consultancies specializing in agile change
                    - success on one team doesn't guarantee success on another. need to keep making the investments
                Scaling Products and Portfolios
                    - vertical scaling
                        increase number of teams who can share ownership of a product or portfolio
                        - LeSS (Large Scale Scrum) https://less.works/
                            - suitable for 2 to 8 teams of up to 8 people each
                            - all work against the same product backlog and share ownership of code
                            - LeSS teams are guided by a product manager/owner who decides product direction
                        - FAST (Fluid Scaling Technology) - https://www.fastagile.io/fast-guide
                            - forms new teams every few days, no team-level ownership
                            - quite a radical approach
                            - perhaps worth an experiment with a pilot team of 10-30 people
                        - problem: collective ownership easily turns into no ownership
                        - benefit: cross functionality is easier with more shared roles on smaller Teams
                    - horizontal scaling
                        - in theory each team should own an end-to-end slice of a product
                        - requires different types of teams:
                            - stream aligned
                            - complicated sub-system teams
                            - enabling teams
                            - platform teams
                        - can scale indefinitely, but becomes harder to manage as teams grow
                    - scaling vertically and horizontally
                        - divide org into 'groups' that are effectively stream-aligned
                        - when they need to scale, they can adopt horizontal scaling techniques
                    - the recommendation
                        - start by emphasizing team fluency
                        - scale vertically before horizontally
                        - if larger than 60-70, split into multiple veritcally scaled groups
                        -
    




    